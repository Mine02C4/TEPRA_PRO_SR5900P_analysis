package main

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net"
)

type TestConfig struct {
	RemoteIpAddr string `json:"remoteIpAddr"`
}

func getConfig() (*TestConfig, error) {
	raw, err := ioutil.ReadFile("test.config.json")
	if err != nil {
		return nil, err
	}
	config := &TestConfig{}
	err = json.Unmarshal(raw, config)
	if err != nil {
		return nil, err
	}
	return config, nil
}

func testUDPMessage(config *TestConfig) {
	conn, err := net.Dial("udp4", config.RemoteIpAddr+":9100")
	if err != nil {
		log.Fatal(err)
	}
	defer conn.Close()
	buffer := make([]byte, 1500)
	var requestDefinitions = map[string][]byte{
		"request01": {
			// 5450525400000000000000010000002000000001000000000000000000000000
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		// Response : 74707274000000000000000100000020000000010000001400000000000000001400000300000000400000000001000000000000
		// Response : 74707274000000000000000100000020000000010000001400000000000000001400000300000000400000000000000000000000
		"requestName": {
			// 54505254000000000000000100000020000000050000000004a2166f6c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0x16, 0x6f, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000000050000004004a2166f6c36a8c054455052412050524f20535235393030500000000000000000000000000000005352353930305041333138464200000000000000000000000000000000000000
		"request03": {
			// 54505254000000000000000100000020000000010000000004a2166f6c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0x16, 0x6f, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000000010000001404a2166f6c36a8c01400000300000000400000000001000000000000
		"request04": {
			// 54505254000000000000000100000020000000010000000004a2167e6c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0x16, 0x7e, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000000010000001404a2167e6c36a8c01400000300000000400000000000000000000000
		// Response : 74707274000000000000000100000020000000010000001404a2167e6c36a8c01400000300000000400000000001000000000000
		"request05": {
			// 54505254000000000000000100000020000000050000000004a21c336c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0x1c, 0x33, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000000050000004004a21c336c36a8c054455052412050524f20535235393030500000000000000000000000000000005352353930305041333138464200000000000000000000000000000000000000
		"request06": {
			// 54505254000000000000000100000020000000010000000004a21c426c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0x1c, 0x42, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000000010000001404a21c426c36a8c01400000300000000400000000000000000000000
		// Response : 74707274000000000000000100000020000000010000001404a21c426c36a8c01400000300000000400000000001000000000000
		"request07": {
			// 54505254000000000000000100000020000000050000000004a2fc2e6c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0xfc, 0x2e, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000000050000004004a2fc2e6c36a8c054455052412050524f20535235393030500000000000000000000000000000005352353930305041333138464200000000000000000000000000000000000000
		"request08": {
			// 54505254000000000000000100000020000000010000000004a2fc3d6c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0xfc, 0x3d, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000000010000001404a2fc3d6c36a8c01400000300000000400000000000000000000000
		// Response : 74707274000000000000000100000020000000010000001404a2fc3d6c36a8c01400000300000000400000000001000000000000
		"request09": {
			// 54505254000000000000000100000020000000020000000004a2fc3d6c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0xfc, 0x3d, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000000020000000304a2fc3d6c36a8c0020000
		"request10": {
			// 54505254000000000000000100000020000001010000000004a2fc3d6c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0xfc, 0x3d, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000001010000000004a2fc3d6c36a8c0
		"request11": {
			// 54505254000000000000000100000020000001000000000004a2fc3d6c36a8c0
			0x54, 0x50, 0x52, 0x54, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x04, 0xa2, 0xfc, 0x3d, 0x6c, 0x36, 0xa8, 0xc0,
		},
		// Response : 74707274000000000000000100000020000001000000000104a2fc3d6c36a8c000
	}
	_, err = conn.Write(requestDefinitions["request10"])
	if err != nil {
		log.Fatal(err)
	}
	length, err := conn.Read(buffer)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(hex.EncodeToString(buffer[:length]))
}

func testPrint(config *TestConfig) error {
	// 1b7b074302020101497d1b7b044405497d1b7b056c0505767d1b7b047300737d1b7b0347477d1b7b074c e20000002e7d1b7b05544000947d # length = 0xE1
	// 1b7b074302020101497d1b7b044405497d1b7b056c0505767d1b7b047300737d1b7b0347477d1b7b074c 2f0200007d7d1b7b05543200867d # length = 0x22E
	header_common := []byte{
		0x1b, 0x7b, 0x07, 0x43, 0x02, 0x02, 0x01, 0x01,
		0x49, 0x7d, 0x1b, 0x7b, 0x04, 0x44, 0x05, 0x49,
		0x7d, 0x1b, 0x7b, 0x05, 0x6c, 0x05, 0x05, 0x76,
		0x7d, 0x1b, 0x7b, 0x04, 0x73, 0x00, 0x73, 0x7d,
		0x1b, 0x7b, 0x03, 0x47, 0x47, 0x7d, 0x1b, 0x7b,
		0x07, 0x4c,
	}
	header_variable := []byte{
		0xe2, 0x00, 0x00, 0x00, 0x2e, 0x7d, 0x1b, 0x7b,
		0x05, 0x54, 0x40, 0x00, 0x94, 0x7d,
	}
	header := append(header_common, header_variable...)
	if len(header) != 56 {
		return fmt.Errorf("Header length MUST be 56 Bytes")
	}
	header_per_line := []byte{
		0x1b, 0x2e, 0x00, 0x0a, 0x0a, 0x01, 0x90, 0x00,
	}
	message_body := header
	for i := 0; i < 226; i++ {
		content_line := make([]byte, 18)
		for j := 0; j < len(content_line); j++ {
			content_line[j] = byte(i % 256)
		}
		line := append(header_per_line, content_line...)
		message_body = append(message_body, line...)
	}
	// 0c1b7b0340407d
	termination := []byte{
		0x0c, 0x1b, 0x7b, 0x03, 0x40, 0x40, 0x7d,
	}
	message_body = append(message_body, termination...)
	conn, err := net.Dial("tcp4", config.RemoteIpAddr+":9100")
	if err != nil {
		log.Fatal(err)
	}
	defer conn.Close()
	_, err = conn.Write(message_body)
	if err != nil {
		log.Fatal(err)
	}
	return nil
}

func main() {
	config, err := getConfig()
	if err != nil {
		log.Fatal(err)
	}
	testUDPMessage(config)
	testPrint(config)
}
